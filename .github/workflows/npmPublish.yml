name: Publish package to npmjs

on:
  workflow_call:
    inputs:
      repository:
        description: 'Repository name with owner. For example: "Expensify/eslint-config-expensify"'
        default: ${{ github.repository }}
        required: false
        type: string
      should_run_build:
        description: 'True if we should run npm run build for the package'
        default: false
        required: false
        type: boolean

jobs:
  version:
    runs-on: ubuntu-latest
    steps:
      - name: Generate a GitHub App token
        id: generateAppToken
        uses: actions/create-github-app-token@9d97a4282b2c51a2f4f0465b9326399f53c890d4
        with:
          app-id: ${{ secrets.OS_BOTIFY_APP_ID }}
          private-key: ${{ secrets.OS_BOTIFY_PRIVATE_KEY }}

      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
          token: ${{ steps.generateAppToken.outputs.token }}

      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install npm packages
        run: npm ci

      # Don't commit the version bump, we will commit later
      - name: Update npm version
        run: npm version patch --git-tag-version false

      - name: Set new version in GitHub ENV
        run: echo "NEW_VERSION=$(jq '.version' package.json)" >> $GITHUB_ENV

      - name: Created signed commit and push tags
        run: |
          #!/bin/bash
          set -euxo pipefail
          version="${{ env.NEW_VERSION }}"

          # Find all files changes with package*.json
          FILES=$(git status --porcelain -- package*.json | awk '{ print $2 }')
  
          for file in $FILES; do
            message="Update version to $version"
            sha=$(git rev-parse "main:$file")
            content=$(base64 -i "$file")
            gh api --method PUT /repos/:owner/:repo/contents/"$file" \
            --field message="$message" \
            --field content="$content" \
            --field encoding="base64" \
            --field branch="$BRANCH_NAME" \
            --field sha="$sha"
          done
          
          # Set up git user info so we can push a tag
          # os-botify[bot] GitHub App ID can be found here: https://api.github.com/users/os-botify[bot]
          git config --global user.name "os-botify[bot]"
          git config --global user.email "140437396+os-botify[bot]@users.noreply.github.com"
          
          # Fetch the commit that was made via the API
          git fetch origin main   

          # Tag new_commit_sha with our new version
          git tag -a $version $new_commit_sha -m "$version"
          
          # Push the new tag
          git push origin tag $version

      - name: Optionally run `npm run build`
        if: ${{ inputs.should_run_build }}
        run: npm run build

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Set name version in GitHub ENV
        run: echo "NAME=$(jq '.name' package.json)" >> $GITHUB_ENV

      - name: Get Pull Request Number
        uses: actions/github-script@v7
        id: pull_request_number
        with:
          script: |
            if (context.issue.number) {
              // Return issue number if present
              return context.issue.number;
            } else {
              // Otherwise return issue number from commit
              return (
                await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  commit_sha: context.sha,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                })
              ).data[0].number;
            }
          result-encoding: string

      - name: Comment on PR
        run: |
          gh pr comment ${{steps.pull_request_number.outputs.result}} --repo ${{ inputs.repository }} --body ":rocket: Published to [npm](https://www.npmjs.com/) in ["${{ env.NEW_VERSION }}"](https://www.npmjs.com/package/"${{ env.NAME }}"/v/"${{ env.NEW_VERSION }}") :tada:"
        env:
          GITHUB_TOKEN: ${{ steps.generateAppToken.outputs.token }}
